-module(proto).

-compile(export_all).

-include("common.hrl").


-define(undef, undefined).

encode(Record)->
	RecName = element(1,Record),
	Bin = proto_struct:encode_def(RecName, Record),
	MsgID = proto_struct:get_id(RecName),
	Bin2 = [<<MsgID:16>>, Bin],
	ByteSize = erlang:iolist_size(Bin2)+3,
	if ByteSize > 102400 ->
		Bin3 = zlib:compress(Bin2),
		ByteSize2 = erlang:iolist_size(Bin3)+3,
		[<<ByteSize2:16,1:8>>, Bin3];
	true ->
		[<<ByteSize:16,0:8>>,Bin2]
	end.
	
%% encode(int64, A) ->
%% 	<<A:64>>;
%% encode(int32, A) ->
%% 	<<A:32>>;
%% encode(int16, A) ->
%% 	<<A:16>>;
%% encode(int8,  A) ->
%% 	<<A:8>>;
%% encode(string, A) ->
%% 	Bin = iolist_to_binary(A),
%% 	BitSize=  erlang:byte_size(Bin),
%% 	<<BitSize:16, Bin/binary>>;
%% encode(bool, A) ->
%% 	if A=:=true ->
%% 		<<1:8>>;
%% 	true ->
%% 		<<0:8>>
%% 	end;
%% encode({list, Type}, A) ->
%% 	Len = length(A),
%% 	Bin = [encode(Type, Element)||Element<-A],
%% 	[<<Len:16>>, Bin];
%% encode(tuple, Record) ->
%% 	[TupleType|VarList] = tuple_to_list(Record),
%% 	[ID|TypeList] = proto_struct:encode_def(TupleType),
%% 	Bin = lists:zipwith(fun encode/2, TypeList, VarList),
%% 	[<<ID:16>>, Bin].

decode(<<0:8,Bin/binary>>) ->
	decode2(Bin);
decode(<<1:8,Bin/binary>>) ->
	decode2(zlib:uncompress(Bin)).

decode2(<<ID:16,Bin/binary>>) ->
%%     ?ERR("~w", [ID]),
	[RecName|TypeList] = proto_struct:decode_def(ID),
	%% 剩余字节严格匹配，不隐藏前端多发字节的错误
	{ok, <<>>, Result} = decode3(TypeList, Bin, [RecName]),
	list_to_tuple(Result).

decode3([int64|TypeList],Bin,Result) ->
	<<Int:64, Bin2/binary>> = Bin,
	decode3(TypeList, Bin2, [Int|Result]);
decode3([int32|TypeList],Bin,Result) ->
	<<Int:32, Bin2/binary>> = Bin,
	decode3(TypeList, Bin2, [Int|Result]);
decode3([int16|TypeList],Bin,Result) ->
	<<Int:16, Bin2/binary>> = Bin,
	decode3(TypeList, Bin2, [Int|Result]);
decode3([int8|TypeList],Bin,Result) ->
	<<Int:8, Bin2/binary>> = Bin,
	decode3(TypeList, Bin2, [Int|Result]);
decode3([string|TypeList],Bin,Result) ->
	<<Len:16, StrBin:Len/binary-unit:8, Bin2/binary>> = Bin,
	decode3(TypeList, Bin2, [binary_to_list(StrBin)|Result]);
decode3([bool|TypeList], Bin, Result) ->
	<<Bool:8, Bin2/binary>> = Bin,
	BoolErl = 
	if Bool =:= 1 ->
		true;
	true ->
		false
	end,
	decode3(TypeList, Bin2, [BoolErl|Result]);
decode3([{list,Type}|TypeList],Bin, Result) ->
	<<Len:16, Bin2/binary>> = Bin,
	ChildTypeList = lists:duplicate(Len, Type),
	{ok, Bin3, List} = decode3(ChildTypeList, Bin2, []),
	decode3(TypeList, Bin3, [List|Result]);
decode3([any|TypeList],Bin,Result)->
	<<ID:8,Bin2/binary>> = Bin,
	case ID of
		241->
			<<V:8,Rest1/binary>> = Bin2,
			decode3(TypeList, Rest1, [V|Result]);
		242->
			<<V:16,Rest1/binary>> = Bin2,
			decode3(TypeList, Rest1, [V|Result]);
		243->
			<<V:32,Rest1/binary>> = Bin2,
			decode3(TypeList, Rest1, [V|Result]);
		244->
			<<V:64,Rest1/binary>> = Bin2,
			decode3(TypeList, Rest1, [V|Result]);
		245->
			<<V:8,Rest1/binary>> = Bin2,
			decode3(TypeList, Rest1, [V|Result]);
		246->
			<<Len:16,Rest1/binary>> = Bin2,
			Len1 = Len * 8,
			<<V:Len1,Rest2/binary>> = Rest1,
			decode3(TypeList, Rest2, [V|Result]);
		_->
			<<RecordID:16,_Bin3/binary>>=Bin,
			decode3([RecordID|TypeList],Bin,Result)
	end;
decode3([RecordID|TypeList], Bin, Result) ->
%	<<ID:16, Bin2/binary>> = Bin,
	[RecName|ChildTypeList] = proto_struct:decode_def(RecordID),
	{ok, Bin3, ChildVal} = decode3(ChildTypeList, Bin, [RecName]),
	decode3(TypeList, Bin3, [list_to_tuple(ChildVal)|Result]);
decode3([],Bin,Result) ->
	{ok, Bin, lists:reverse(Result)}.


%% 效能测试代码
-define(Record,{sc_fight_request,[{p_fighter,1,1,1,2000,2000,40,1,1},
								  {p_fighter,2,2,2,2000,2000,40,1,1},
								  {p_fighter,3,3,3,2000,2000,40,1,1},
								  {p_fighter,4,4,4,2000,2000,40,1,1},
								  {p_fighter,5,5,5,2000,2000,40,1,1},
								  {p_fighter,6,6,6,2000,2000,40,1,1},
								  {p_fighter,7,7,-1,2000,2000,40,1,1},
								  {p_fighter,8,8,-2,2000,2000,40,1,1},
								  {p_fighter,9,9,-3,2000,2000,40,1,1},
								  {p_fighter,10,10,-4,2000,2000,40,1,1},
								  {p_fighter,11,11,-5,2000,2000,40,1,1},
								  {p_fighter,12,12,-6,2000,2000,40,1,1}],
				[{p_action,-5,1,[5],0,67,0},{p_action,5,3,[],100,-768,64},
				 {p_action,-5,10,[5],10,67,0},{p_action,5,2,[-5],0,-76,0},
				 {p_action,5,1,[-5],0,76,0},{p_action,-5,11,[],90,-764,64},
				 {p_action,5,10,[-5],10,0,0},{p_action,-4,2,[4],0,-63,0},
				 {p_action,-4,1,[4],0,63,0},{p_action,4,11,[],90,-634,96},
				 {p_action,-4,10,[4],10,0,0},{p_action,-6,1,[6],0,45,0},
				 {p_action,6,3,[],100,-680,64},{p_action,-6,10,[6],10,45,0},
				 {p_action,6,2,[-6],0,-69,0},{p_action,6,1,[-6],0,69,0},
				 {p_action,-6,11,[],70,-698,64},{p_action,6,10,[-6],10,0,0},
				 {p_action,-5,2,[5],0,-63,0},{p_action,-5,1,[5],0,63,0},
				 {p_action,5,11,[],90,-639,64},{p_action,-5,10,[5],10,0,0},
				 {p_action,5,2,[-5],0,-61,0},{p_action,5,1,[-5],0,61,0},
				 {p_action,-5,11,[],70,-617,64},{p_action,5,10,[-5],10,0,0},
				 {p_action,-4,2,[4],0,-74,0},{p_action,-4,1,[4],0,74,0},
				 {p_action,4,11,[],80,-746,96},{p_action,-4,10,[4],10,0,0},
				 {p_action,4,1,[-3],0,9,0},{p_action,-3,3,[],100,-585,64},
				 {p_action,4,10,[-3],10,9,0},{p_action,-3,2,[6],0,-78,0},
				 {p_action,-3,1,[6],0,78,0},{p_action,6,11,[],80,-784,64},
				 {p_action,-3,10,[6],10,0,0},{p_action,-6,2,[6],0,-75,0},
				 {p_action,-6,1,[6],0,75,0},{p_action,6,11,[],70,-757,64},
				 {p_action,-6,10,[6],10,0,0},{p_action,6,2,[-3],0,-69,0},
				 {p_action,6,1,[-3],0,69,0},{p_action,-3,11,[],90,-698,64},
				 {p_action,6,10,[-3],10,0,0},{p_action,-5,2,[5],0,-69,0},
				 {p_action,-5,1,[5],0,69,0},{p_action,5,11,[],70,-691,64},
				 {p_action,-5,10,[5],10,0,0},{p_action,5,1,[-1],0,43,0},
				 {p_action,-1,3,[],100,-539,64},{p_action,5,10,[-1],10,43,0},
				 {p_action,-4,1,[2],0,65,0},{p_action,2,3,[],90,-686,96},
				 {p_action,-4,10,[2],10,65,0},{p_action,4,2,[-1],0,-53,0},
				 {p_action,4,1,[-1],0,53,0},{p_action,-1,11,[],90,-537,64},
				 {p_action,4,10,[-1],10,0,0},{p_action,-3,1,[3],0,62,0},
				 {p_action,3,3,[],80,-693,64},{p_action,-3,10,[3],10,62,0},
				 {p_action,2,1,[-2],0,43,0},{p_action,-2,3,[],80,-796,64},
				 {p_action,2,10,[-2],10,43,0},{p_action,-1,1,[1],0,64,0},
				 {p_action,1,3,[],80,-780,64},{p_action,-1,10,[1],10,64,0},
				 {p_action,-6,2,[3],0,-68,0},{p_action,-6,1,[3],0,68,0},
				 {p_action,3,11,[],70,-689,96},{p_action,-6,10,[3],10,0,0},
				 {p_action,6,2,[-3],0,-65,0},{p_action,6,1,[-3],0,65,0},
				 {p_action,-3,11,[],70,-654,64},{p_action,6,10,[-3],10,0,0},
				 {p_action,-5,2,[2],0,-62,0},{p_action,-5,1,[2],0,62,0},
				 {p_action,2,11,[],70,-622,64},{p_action,-5,10,[2],10,0,0},
				 {p_action,5,2,[-2],0,-77,0},{p_action,5,1,[-2],0,77,0},
				 {p_action,-2,11,[],70,-778,64},{p_action,5,10,[-2],10,0,0},
				 {p_action,-4,2,[1],0,-57,0},{p_action,-4,1,[1],0,57,0},
				 {p_action,1,11,[],70,-577,96},{p_action,-4,10,[1],10,0,0},
				 {p_action,4,2,[-1],0,-55,0},{p_action,4,1,[-1],0,55,0},
				 {p_action,-1,11,[],70,-559,64},{p_action,4,10,[-1],10,0,0},
				 {p_action,-3,2,[3],0,-68,0},{p_action,-3,1,[3],0,68,0},
				 {p_action,3,11,[],60,-688,64},{p_action,-3,10,[3],10,0,0},
				 {p_action,3,2,[-3],0,-61,0},{p_action,3,1,[-3],0,61,0},
				 {p_action,-3,11,[],50,-617,64},{p_action,3,10,[-3],10,0,0},{p_action,-2,2,[2],0,-76,0},{p_action,-2,1,[2],0,76,0},
				 {p_action,2,11,[],60,-763,64},{p_action,-2,10,[2],10,0,0},{p_action,2,2,[-2],0,-78,0},{p_action,2,1,[-2],0,78,0},
				 {p_action,-2,11,[],50,-789,64},{p_action,2,10,[-2],10,0,0},{p_action,-1,2,[1],0,-78,0},{p_action,-1,1,[1],0,78,0},
				 {p_action,1,11,[],60,-782,64},{p_action,-1,10,[1],10,0,0},{p_action,1,2,[-1],0,-53,0},{p_action,1,1,[-1],0,53,0},
				 {p_action,-1,11,[],50,-538,64},{p_action,1,10,[-1],10,0,0}],true}).

-define(Bin1, <<0,78,34,0,12,78,35,0,0,0,1,0,1,0,1,0,2,1,1,0,0,7,                                                                                                                                                                    
  208,0,0,7,208,0,0,0,40,78,35,0,0,0,2,0,2,0,1,0,3,2,1,0,                                                                                                                                                                  
  0,7,208,0,0,7,208,0,0,0,40,78,35,0,0,0,3,0,3,0,1,0,4,3,                                                                                                                                                                  
  1,0,0,7,208,0,0,7,208,0,0,0,40,78,35,0,0,0,4,0,4,0,1,0,                                                                                                                                                                  
  5,4,1,0,0,7,208,0,0,7,208,0,0,0,40,78,35,0,0,0,5,0,5,0,                                                                                                                                                                  
  1,0,6,5,1,0,0,7,208,0,0,7,208,0,0,0,40,78,35,0,0,0,6,0,                                                                                                                                                                  
  6,0,1,0,7,6,1,0,0,7,208,0,0,7,208,0,0,0,40,78,35,0,0,0,                                                                                                                                                                  
  7,0,7,0,1,0,2,255,255,0,0,7,208,0,0,7,208,0,0,0,40,78,                                                                                                                                                                   
  35,0,0,0,8,0,8,0,1,0,4,254,255,0,0,7,208,0,0,7,208,0,0,                                                                                                                                                                  
  0,40,78,35,0,0,0,9,0,9,0,1,0,3,253,255,0,0,7,208,0,0,7,                                                                                                                                                                  
  208,0,0,0,40,78,35,0,0,0,10,0,10,0,1,0,5,252,255,0,0,7,                                                                                                                                                                  
  208,0,0,7,208,0,0,0,40,78,35,0,0,0,11,0,11,0,1,0,7,251,                                                                                                                                                                  
  255,0,0,7,208,0,0,7,208,0,0,0,40,78,35,0,0,0,12,0,12,0,                                                                                                                                                                  
  1,0,8,250,255,0,0,7,208,0,0,7,208,0,0,0,40,0,116,78,36,                                                                                                                                                                  
  251,1,0,1,5,0,0,0,0,67,0,78,36,5,3,0,0,100,255,255,253,                                                                                                                                                                  
  0,64,78,36,251,10,0,1,5,10,0,0,0,67,0,78,36,5,2,0,1,251,                                                                                                                                                                 
  0,255,255,255,180,0,78,36,5,1,0,1,251,0,0,0,0,76,0,78,                        
  36,251,11,0,0,90,255,255,253,4,64,78,36,5,10,0,1,251,10,
  0,0,0,0,0,78,36,252,2,0,1,4,0,255,255,255,193,0,78,36,
  252,1,0,1,4,0,0,0,0,63,0,78,36,4,11,0,0,90,255,255,253,
  134,96,78,36,252,10,0,1,4,10,0,0,0,0,0,78,36,250,1,0,1,
  6,0,0,0,0,45,0,78,36,6,3,0,0,100,255,255,253,88,64,78,
  36,250,10,0,1,6,10,0,0,0,45,0,78,36,6,2,0,1,250,0,255,
  255,255,187,0,78,36,6,1,0,1,250,0,0,0,0,69,0,78,36,250,
  11,0,0,70,255,255,253,70,64,78,36,6,10,0,1,250,10,0,0,0,
  0,0,78,36,251,2,0,1,5,0,255,255,255,193,0,78,36,251,1,0,
  1,5,0,0,0,0,63,0,78,36,5,11,0,0,90,255,255,253,129,64,
  78,36,251,10,0,1,5,10,0,0,0,0,0,78,36,5,2,0,1,251,0,255,
  255,255,195,0,78,36,5,1,0,1,251,0,0,0,0,61,0,78,36,251,
  11,0,0,70,255,255,253,151,64,78,36,5,10,0,1,251,10,0,0,
  0,0,0,78,36,252,2,0,1,4,0,255,255,255,182,0,78,36,252,1,
  0,1,4,0,0,0,0,74,0,78,36,4,11,0,0,80,255,255,253,22,96,
  78,36,252,10,0,1,4,10,0,0,0,0,0,78,36,4,1,0,1,253,0,0,0,
  0,9,0,78,36,253,3,0,0,100,255,255,253,183,64,78,36,4,10,
  0,1,253,10,0,0,0,9,0,78,36,253,2,0,1,6,0,255,255,255,
  178,0,78,36,253,1,0,1,6,0,0,0,0,78,0,78,36,6,11,0,0,80,
  255,255,252,240,64,78,36,253,10,0,1,6,10,0,0,0,0,0,78,
  36,250,2,0,1,6,0,255,255,255,181,0,78,36,250,1,0,1,6,0,
  0,0,0,75,0,78,36,6,11,0,0,70,255,255,253,11,64,78,36,
  250,10,0,1,6,10,0,0,0,0,0,78,36,6,2,0,1,253,0,255,255,
  255,187,0,78,36,6,1,0,1,253,0,0,0,0,69,0,78,36,253,11,0,
  0,90,255,255,253,70,64,78,36,6,10,0,1,253,10,0,0,0,0,0,
  78,36,251,2,0,1,5,0,255,255,255,187,0,78,36,251,1,0,1,5,
  0,0,0,0,69,0,78,36,5,11,0,0,70,255,255,253,77,64,78,36,
  251,10,0,1,5,10,0,0,0,0,0,78,36,5,1,0,1,255,0,0,0,0,43,
  0,78,36,255,3,0,0,100,255,255,253,229,64,78,36,5,10,0,1,
  255,10,0,0,0,43,0,78,36,252,1,0,1,2,0,0,0,0,65,0,78,36,
  2,3,0,0,90,255,255,253,82,96,78,36,252,10,0,1,2,10,0,0,
  0,65,0,78,36,4,2,0,1,255,0,255,255,255,203,0,78,36,4,1,
  0,1,255,0,0,0,0,53,0,78,36,255,11,0,0,90,255,255,253,
  231,64,78,36,4,10,0,1,255,10,0,0,0,0,0,78,36,253,1,0,1,
  3,0,0,0,0,62,0,78,36,3,3,0,0,80,255,255,253,75,64,78,36,
  253,10,0,1,3,10,0,0,0,62,0,78,36,2,1,0,1,254,0,0,0,0,43,
  0,78,36,254,3,0,0,80,255,255,252,228,64,78,36,2,10,0,1,
  254,10,0,0,0,43,0,78,36,255,1,0,1,1,0,0,0,0,64,0,78,36,
  1,3,0,0,80,255,255,252,244,64,78,36,255,10,0,1,1,10,0,0,
  0,64,0,78,36,250,2,0,1,3,0,255,255,255,188,0,78,36,250,
  1,0,1,3,0,0,0,0,68,0,78,36,3,11,0,0,70,255,255,253,79,
  96,78,36,250,10,0,1,3,10,0,0,0,0,0,78,36,6,2,0,1,253,0,
  255,255,255,191,0,78,36,6,1,0,1,253,0,0,0,0,65,0,78,36,
  253,11,0,0,70,255,255,253,114,64,78,36,6,10,0,1,253,10,
  0,0,0,0,0,78,36,251,2,0,1,2,0,255,255,255,194,0,78,36,
  251,1,0,1,2,0,0,0,0,62,0,78,36,2,11,0,0,70,255,255,253,
  146,64,78,36,251,10,0,1,2,10,0,0,0,0,0,78,36,5,2,0,1,
  254,0,255,255,255,179,0,78,36,5,1,0,1,254,0,0,0,0,77,0,
  78,36,254,11,0,0,70,255,255,252,246,64,78,36,5,10,0,1,
  254,10,0,0,0,0,0,78,36,252,2,0,1,1,0,255,255,255,199,0,
  78,36,252,1,0,1,1,0,0,0,0,57,0,78,36,1,11,0,0,70,255,
  255,253,191,96,78,36,252,10,0,1,1,10,0,0,0,0,0,78,36,4,
  2,0,1,255,0,255,255,255,201,0,78,36,4,1,0,1,255,0,0,0,0,
  55,0,78,36,255,11,0,0,70,255,255,253,209,64,78,36,4,10,
  0,1,255,10,0,0,0,0,0,78,36,253,2,0,1,3,0,255,255,255,
  188,0,78,36,253,1,0,1,3,0,0,0,0,68,0,78,36,3,11,0,0,60,
  255,255,253,80,64,78,36,253,10,0,1,3,10,0,0,0,0,0,78,36,
  3,2,0,1,253,0,255,255,255,195,0,78,36,3,1,0,1,253,0,0,0,
  0,61,0,78,36,253,11,0,0,50,255,255,253,151,64,78,36,3,
  10,0,1,253,10,0,0,0,0,0,78,36,254,2,0,1,2,0,255,255,255,
  180,0,78,36,254,1,0,1,2,0,0,0,0,76,0,78,36,2,11,0,0,60,
  255,255,253,5,64,78,36,254,10,0,1,2,10,0,0,0,0,0,78,36,
  2,2,0,1,254,0,255,255,255,178,0,78,36,2,1,0,1,254,0,0,0,
  0,78,0,78,36,254,11,0,0,50,255,255,252,235,64,78,36,2,
  10,0,1,254,10,0,0,0,0,0,78,36,255,2,0,1,1,0,255,255,255,
  178,0,78,36,255,1,0,1,1,0,0,0,0,78,0,78,36,1,11,0,0,60,
  255,255,252,242,64,78,36,255,10,0,1,1,10,0,0,0,0,0,78,
  36,1,2,0,1,255,0,255,255,255,203,0,78,36,1,1,0,1,255,0,
  0,0,0,53,0,78,36,255,11,0,0,50,255,255,253,230,64,78,36,
  1,10,0,1,255,10,0,0,0,0,0,1>>).

-define(Bin2, <<131,104,4,100,0,16,115,99,95,102,105,103,104,116,95,114,101,113,117,101,115,116,108,0,0,0,12,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,1,97,1,97,1,97,2,97,1,97,1,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,2,97,2,97,1,97,3,97,2,97,1,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,3,97,3,97,1,97,4,97,3,97,1,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,4,97,4,97,1,97,5,97,4,97,1,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,5,97,5,97,1,97,6,97,5,97,1,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,6,97,6,97,1,97,7,97,6,97,1,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,7,97,7,97,1,97,2,98,255,255,255,255,98,255,255,255,255,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,8,97,8,97,1,97,4,98,255,255,255,254,98,255,255,255,255,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,9,97,9,97,1,97,3,98,255,255,255,253,98,255,255,255,255,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,10,97,10,97,1,97,5,98,255,255,255,252,98,255,255,255,255,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,11,97,11,97,1,97,7,98,255,255,255,251,98,255,255,255,255,98,0,0,7,208,98,0,0,7,208,97,40,104,10,100,0,9,112,95,102,105,103,104,116,101,114,97,12,97,12,97,1,97,8,98,255,255,255,250,98,255,255,255,255,98,0,0,7,208,98,0,0,7,208,97,40,106,108,0,0,0,116,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,1,107,0,1,5,97,0,97,67,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,3,106,97,100,98,255,255,253,0,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,10,107,0,1,5,97,10,97,67,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,2,108,0,0,0,1,98,255,255,255,251,106,97,0,98,255,255,255,180,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,1,108,0,0,0,1,98,255,255,255,251,106,97,0,97,76,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,11,106,97,90,98,255,255,253,4,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,10,108,0,0,0,1,98,255,255,255,251,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,2,107,0,1,4,97,0,98,255,255,255,193,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,1,107,0,1,4,97,0,97,63,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,11,106,97,90,98,255,255,253,134,97,96,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,10,107,0,1,4,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,1,107,0,1,6,97,0,97,45,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,3,106,97,100,98,255,255,253,88,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,10,107,0,1,6,97,10,97,45,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,2,108,0,0,0,1,98,255,255,255,250,106,97,0,98,255,255,255,187,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,1,108,0,0,0,1,98,255,255,255,250,106,97,0,97,69,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,11,106,97,70,98,255,255,253,70,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,10,108,0,0,0,1,98,255,255,255,250,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,2,107,0,1,5,97,0,98,255,255,255,193,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,1,107,0,1,5,97,0,97,63,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,11,106,97,90,98,255,255,253,129,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,10,107,0,1,5,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,2,108,0,0,0,1,98,255,255,255,251,106,97,0,98,255,255,255,195,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,1,108,0,0,0,1,98,255,255,255,251,106,97,0,97,61,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,11,106,97,70,98,255,255,253,151,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,10,108,0,0,0,1,98,255,255,255,251,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,2,107,0,1,4,97,0,98,255,255,255,182,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,1,107,0,1,4,97,0,97,74,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,11,106,97,80,98,255,255,253,22,97,96,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,10,107,0,1,4,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,1,108,0,0,0,1,98,255,255,255,253,106,97,0,97,9,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,3,106,97,100,98,255,255,253,183,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,10,108,0,0,0,1,98,255,255,255,253,106,97,10,97,9,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,2,107,0,1,6,97,0,98,255,255,255,178,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,1,107,0,1,6,97,0,97,78,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,11,106,97,80,98,255,255,252,240,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,10,107,0,1,6,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,2,107,0,1,6,97,0,98,255,255,255,181,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,1,107,0,1,6,97,0,97,75,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,11,106,97,70,98,255,255,253,11,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,10,107,0,1,6,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,2,108,0,0,0,1,98,255,255,255,253,106,97,0,98,255,255,255,187,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,1,108,0,0,0,1,98,255,255,255,253,106,97,0,97,69,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,11,106,97,90,98,255,255,253,70,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,10,108,0,0,0,1,98,255,255,255,253,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,2,107,0,1,5,97,0,98,255,255,255,187,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,1,107,0,1,5,97,0,97,69,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,11,106,97,70,98,255,255,253,77,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,10,107,0,1,5,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,1,108,0,0,0,1,98,255,255,255,255,106,97,0,97,43,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,3,106,97,100,98,255,255,253,229,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,10,108,0,0,0,1,98,255,255,255,255,106,97,10,97,43,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,1,107,0,1,2,97,0,97,65,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,2,97,3,106,97,90,98,255,255,253,82,97,96,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,10,107,0,1,2,97,10,97,65,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,2,108,0,0,0,1,98,255,255,255,255,106,97,0,98,255,255,255,203,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,1,108,0,0,0,1,98,255,255,255,255,106,97,0,97,53,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,11,106,97,90,98,255,255,253,231,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,10,108,0,0,0,1,98,255,255,255,255,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,1,107,0,1,3,97,0,97,62,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,3,97,3,106,97,80,98,255,255,253,75,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,10,107,0,1,3,97,10,97,62,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,2,97,1,108,0,0,0,1,98,255,255,255,254,106,97,0,97,43,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,254,97,3,106,97,80,98,255,255,252,228,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,2,97,10,108,0,0,0,1,98,255,255,255,254,106,97,10,97,43,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,1,107,0,1,1,97,0,97,64,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,1,97,3,106,97,80,98,255,255,252,244,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,10,107,0,1,1,97,10,97,64,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,2,107,0,1,3,97,0,98,255,255,255,188,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,1,107,0,1,3,97,0,97,68,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,3,97,11,106,97,70,98,255,255,253,79,97,96,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,250,97,10,107,0,1,3,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,2,108,0,0,0,1,98,255,255,255,253,106,97,0,98,255,255,255,191,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,1,108,0,0,0,1,98,255,255,255,253,106,97,0,97,65,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,11,106,97,70,98,255,255,253,114,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,6,97,10,108,0,0,0,1,98,255,255,255,253,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,2,107,0,1,2,97,0,98,255,255,255,194,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,1,107,0,1,2,97,0,97,62,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,2,97,11,106,97,70,98,255,255,253,146,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,251,97,10,107,0,1,2,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,2,108,0,0,0,1,98,255,255,255,254,106,97,0,98,255,255,255,179,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,1,108,0,0,0,1,98,255,255,255,254,106,97,0,97,77,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,254,97,11,106,97,70,98,255,255,252,246,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,5,97,10,108,0,0,0,1,98,255,255,255,254,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,2,107,0,1,1,97,0,98,255,255,255,199,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,1,107,0,1,1,97,0,97,57,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,1,97,11,106,97,70,98,255,255,253,191,97,96,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,252,97,10,107,0,1,1,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,2,108,0,0,0,1,98,255,255,255,255,106,97,0,98,255,255,255,201,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,1,108,0,0,0,1,98,255,255,255,255,106,97,0,97,55,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,11,106,97,70,98,255,255,253,209,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,4,97,10,108,0,0,0,1,98,255,255,255,255,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,2,107,0,1,3,97,0,98,255,255,255,188,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,1,107,0,1,3,97,0,97,68,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,3,97,11,106,97,60,98,255,255,253,80,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,10,107,0,1,3,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,3,97,2,108,0,0,0,1,98,255,255,255,253,106,97,0,98,255,255,255,195,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,3,97,1,108,0,0,0,1,98,255,255,255,253,106,97,0,97,61,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,253,97,11,106,97,50,98,255,255,253,151,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,3,97,10,108,0,0,0,1,98,255,255,255,253,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,254,97,2,107,0,1,2,97,0,98,255,255,255,180,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,254,97,1,107,0,1,2,97,0,97,76,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,2,97,11,106,97,60,98,255,255,253,5,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,254,97,10,107,0,1,2,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,2,97,2,108,0,0,0,1,98,255,255,255,254,106,97,0,98,255,255,255,178,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,2,97,1,108,0,0,0,1,98,255,255,255,254,106,97,0,97,78,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,254,97,11,106,97,50,98,255,255,252,235,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,2,97,10,108,0,0,0,1,98,255,255,255,254,106,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,2,107,0,1,1,97,0,98,255,255,255,178,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,1,107,0,1,1,97,0,97,78,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,1,97,11,106,97,60,98,255,255,252,242,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,10,107,0,1,1,97,10,97,0,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,1,97,2,108,0,0,0,1,98,255,255,255,255,106,97,0,98,255,255,255,203,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,97,1,97,1,108,0,0,0,1,98,255,255,255,255,106,97,0,97,53,97,0,104,7,100,0,8,112,95,97,99,116,105,111,110,98,255,255,255,255,97,11,106,97,50,98,255,255,253,230,97,64,104,7,100,0,8,112,95,97,99,116,105,111,110,97,1,97,10,108,0,0,0,1,98,255,255,255,255,106,97,10,97,0,97,0,106,100,0,4,116,114,117,101>>).

en1(N) ->
	tc:run(N, fun() -> encode(?Record) end).
en2(N) ->
	tc:run(N, fun() ->term_to_binary(?Record) end).

t() ->
	encode(?Record).

de1(N) ->
	tc:run(N, fun() -> decode(?Bin1) end).

de2(N) ->
	tc:run(N, fun() -> binary_to_term(?Bin2) end).

b(N) ->
	tc:run(N, fun() -> ok end).

list_int8(N,R) ->
	List = element(N,R),
	<<
	  (length(List)):16,
	   (<< <<E:8>> || E<-List >>)/bitstring
	>>.
list_int16(N,R) ->
	List = element(N,R),
	<<(length(List)):16, (<< <<E:16>> || E<-List >>)/bitstring>>.
list_int32(N,R) ->
	List=element(N,R),
	<<(length(List)):16, (<< <<E:32>> || E<-List >>)/bitstring>>.
list_int64(N,R) ->
	List=element(N,R),
	<<(length(List)):16, (<< <<E:64>> || E<-List >>)/bitstring>>.
list_bool(N,R) ->
	List=element(N,R),
	<<(length(List)):16, (<< <<(case E of true -> <<1:8>>; false -> <<0:8>> end)/bitstring>> || E <- List >>)/bitstring >>.
list_string(N,R) ->
	List=element(N,R),
	<<(length(List)):16, (<< <<(byte_size(Bin)):16, Bin/bitstring>> || E<-List, Bin<-[iolist_to_binary(E)] >>)/bitstring>>.
list_tuple(N,R) ->
	List=element(N,R), 
	<<(length(List)):16, (<< <<(encode_def(element(1,E),E))/bitstring>> || E<-List >>)/bitstring	>>.

string(Str) ->
	Str2 = iolist_to_binary(Str),
	<<(byte_size(Str2)):16, Str2/bitstring>>.

-define(a(N,R), (element(N,R))).
-define(int8(N,R), (element(N,R)):8).
-define(int16(N,R), (element(N,R)):16).
-define(int32(N,R), (element(N,R)):32).
-define(int64(N,R), (element(N,R)):64).
-define(bool(N,R), (case element(N,R) of true -> <<1:8>>; false -> <<0:8>> end)/bitstring).
-define(string(N,R), string(element(N,R))/bitstring).
					 
-define(l(Type,R), (encode_list(Type, R))/bitstring).
encode_def(p_action, R)->
	<<20004:16, ?int8(2,R),?int8(3,R),(list_int8(4,R))/bitstring,?int8(5,R),?int32(6,R),?int8(7,R)>>;
encode_def(p_fighter, R) ->
	<<20003:16,?int32(2,R),?int16(3,R),?int16(4,R),?int16(5,R),?int8(6,R),?int8(7,R),?int32(8,R),?int32(9,R),?int32(10,R)>>;
encode_def(sc_fight_request, R) ->
	<<20002:16,(list_tuple(2,R))/bitstring,(list_tuple(3,R))/bitstring,?bool(4,R)>>.

start() ->
	A = encode_def(sc_fight_request, ?Record),
	%<<(byte_size(A)+3):16, 0:8, A/bitstring>>,
	proto:decode(<<0:8, A/bitstring>>).